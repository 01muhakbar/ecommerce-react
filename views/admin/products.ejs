<!DOCTYPE html>
<html lang="id">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate" />
    <meta http-equiv="Pragma" content="no-cache" />
    <meta http-equiv="Expires" content="0" />
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
      body {
        font-family: "Poppins", sans-serif;
      }
    </style>
  </head>
  <body class="bg-gray-100 p-8">
    <div class="max-w-7xl mx-auto bg-white p-6 rounded-lg shadow-md">
      <div class="mb-4">
        <button onclick="window.location.href='/dashboard'" class="bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded">
          Kembali
        </button>
      </div>
      <div class="flex justify-between items-center mb-6">
        <h1 class="text-3xl font-bold text-gray-800">Manajemen Produk</h1>
        <div>
          
          <button id="add-category-btn" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded ml-2">
            Tambah Kategori
          </button>
          <a href="/dashboard/products/add-product" class="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded">
            Tambahkan Produk Baru
          </a>
        </div>
      </div>

      <div class="flex items-end space-x-4 mb-4">
        <!-- Search Product Input -->
        <div class="flex-1">
          <label for="product-search-input" class="block text-sm font-medium text-gray-700">Cari Produk:</label>
          <input type="text" id="product-search-input" placeholder="Nama Produk" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
        </div>

        <!-- Category Filter -->
        <div class="flex-1">
          <label for="category-filter" class="block text-sm font-medium text-gray-700">Filter by Category:</label>
          <select id="category-filter" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md shadow-sm">
            <option value="">All Categories</option>
            <% if (typeof categories !== 'undefined' && categories.length > 0) { %>
              <% categories.forEach(category => { %>
                <option value="<%= category.id %>"><%= category.name %></option>
              <% }); %>
            <% } %>
          </select>
        </div>

        <!-- Seller Filter -->
        <div class="flex-1">
          <label for="seller-filter" class="block text-sm font-medium text-gray-700">Filter by Seller:</label>
          <select id="seller-filter" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md shadow-sm">
            <option value="">All Sellers</option>
            <% if (typeof sellers !== 'undefined' && sellers.length > 0) { %>
              <% sellers.forEach(seller => { %>
                <option value="<%= seller.id %>"><%= seller.name %></option>
              <% }); %>
            <% } %>
          </select>
        </div>
      </div>

      <div id="products-list" class="overflow-x-auto">
        <table class="min-w-full table-auto bg-white rounded-lg shadow-md">
          <thead>
            <tr class="bg-gray-200 text-gray-700 uppercase text-sm leading-normal">
              <th class="py-3 px-6 text-left">ID</th>
              <th class="py-3 px-6 text-left">Nama Produk</th>
              <th class="py-3 px-6 text-left">Harga</th>
              <th class="py-3 px-6 text-left">Stok</th>
              <th class="py-3 px-6 text-left">Kategori</th>
              <th class="py-3 px-6 text-left">Penjual</th>
              <th class="py-3 px-6 text-left">Status</th>
              <th class="py-3 px-6 text-left">Berat</th>
              <th class="py-3 px-6 text-left">Kondisi</th>
              <th class="py-3 px-6 text-center">Gambar Promosi</th>
              <th class="py-3 px-6 text-center">Aksi</th>
            </tr>
          </thead>
          <tbody id="products-table-body" class="text-gray-600 text-sm font-light">
            <!-- Product data will be loaded here -->
          </tbody>
        </table>
      </div>

      <div id="loading-message" class="text-center text-gray-500 mt-4">Memuat produk...</div>
      <div id="error-message" class="text-center text-red-500 mt-4" style="display: none;"></div>
    </div>

    <!-- Custom Confirmation Modal -->
    <div id="confirm-delete-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden">
      <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
        <div class="mt-3 text-center">
          <h3 class="text-lg leading-6 font-medium text-gray-900">Konfirmasi Hapus Produk</h3>
          <div class="mt-2 px-7 py-3">
            <p class="text-sm text-gray-500">Apakah Anda yakin ingin menghapus produk ini? Tindakan ini tidak dapat dibatalkan.</p>
          </div>
          <div class="items-center px-4 py-3">
            <button id="confirm-delete" class="inline-flex justify-center rounded-md border border-transparent bg-red-600 px-4 py-2 text-base font-medium text-white shadow-sm hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 sm:ml-3 sm:w-auto sm:text-sm">
              Hapus
            </button>
            <button id="cancel-delete" class="mt-3 inline-flex justify-center rounded-md border border-gray-300 bg-white px-4 py-2 text-base font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 sm:mt-0 sm:w-auto sm:text-sm">
              Batal
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Success Notification Popup -->
    <div id="success-notification" class="fixed bottom-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg hidden">
      Produk berhasil dihapus!
    </div>

    <!-- Success Notification Popup for Category Update -->
    <div id="category-update-success-notification" class="fixed bottom-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg hidden">
      Kategori produk berhasil diperbarui!
    </div>

    <!-- Success Notification Popup for Add Category -->
    <div id="add-category-success-notification" class="fixed bottom-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg hidden">
      Kategori berhasil ditambahkan!
    </div>

    <!-- Add Category Modal -->
    <div id="add-category-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden">
      <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
        <div class="mt-3">
          <h3 class="text-lg leading-6 font-medium text-gray-900 text-center">Tambah Kategori Baru</h3>
          <form id="add-category-form" class="mt-4">
            <div class="mb-4">
              <label for="category-name" class="block text-sm font-medium text-gray-700">Nama Kategori</label>
              <input type="text" id="category-name" name="name" required class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
            </div>
            <div class="mb-4">
              <label for="category-description" class="block text-sm font-medium text-gray-700">Deskripsi (Opsional)</label>
              <textarea id="category-description" name="description" rows="3" class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"></textarea>
            </div>
            <div class="items-center px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
              <button id="save-category-btn" type="submit" class="inline-flex justify-center rounded-md border border-transparent bg-blue-600 px-4 py-2 text-base font-medium text-white shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 sm:ml-3 sm:w-auto sm:text-sm">
                Simpan
              </button>
              <button id="cancel-category-btn" type="button" class="mt-3 inline-flex justify-center rounded-md border border-gray-300 bg-white px-4 py-2 text-base font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 sm:mt-0 sm:w-auto sm:text-sm">
                Batal
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>

    <script>
      document.addEventListener("DOMContentLoaded", async () => {
        const productsTableBody = document.getElementById("products-table-body");
        const loadingMessage = document.getElementById("loading-message");
        const errorMessage = document.getElementById("error-message");
        const productSearchInput = document.getElementById("product-search-input"); // New
        const categoryFilter = document.getElementById("category-filter");
        const sellerFilter = document.getElementById("seller-filter");

        const categories = <%- JSON.stringify(categories) %>;
        const sellers = <%- JSON.stringify(sellers) %>;

        async function fetchAndRenderProducts(search = '', categoryId = '', sellerId = '') { // Modified signature
          console.log("--- fetchAndRenderProducts Debug ---");
          console.log("Received search:", search); // New log
          console.log("Received categoryId:", categoryId);
          console.log("Received sellerId:", sellerId);

          loadingMessage.style.display = "block";
          productsTableBody.innerHTML = '';
          errorMessage.style.display = "none";

          let url = new URL('/api/v1/products', window.location.origin);
          if (search) { // New condition
            url.searchParams.append('search', search);
          }
          if (categoryId) {
            url.searchParams.append('categoryId', categoryId);
          }
          if (sellerId) {
            url.searchParams.append('userId', sellerId);
          }

          console.log("Fetching URL:", url.toString());

          try {
            const response = await fetch(url.toString(), {
              cache: "no-store", // Bypass cache
            });

            if (!response.ok) {
              const errorData = await response.json();
              throw new Error(
                errorData.message || "Gagal mengambil data produk."
              );
            }

            const data = await response.json();
            loadingMessage.style.display = "none";

            if (data.data.products.length === 0) {
              productsTableBody.innerHTML = `<tr><td colspan="11" class="py-3 px-6 text-center text-gray-500">Tidak ada produk ditemukan.</td></tr>`;
              return;
            }

            data.data.products.forEach((product) => {
              const categoryOptions = categories.map(cat => `<option value="${cat.id}" ${product.categoryId == cat.id ? 'selected' : ''}>${cat.name}</option>`).join('');
              const promoImageSrc = product.promoImagePath ? `/${product.promoImagePath.replace(/\\/g, '/')}` : '/images/placeholder.png';
              const row = `
                <tr class="border-b border-gray-200 hover:bg-gray-100">
                  <td class="py-3 px-6 text-left whitespace-nowrap">${product.id}</td>
                  <td class="py-3 px-6 text-left">${product.name}</td>
                  <td class="py-3 px-6 text-left">Rp ${parseFloat(product.price).toLocaleString('id-ID')}</td>
                  <td class="py-3 px-6 text-left">${product.stock}</td>
                  <td class="py-3 px-6 text-left">
                    <select data-product-id="${product.id}" class="category-select mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                      <option value="">Pilih Kategori</option>
                      ${categoryOptions}
                    </select>
                  </td>
                  <td class="py-3 px-6 text-left">${product.seller ? product.seller.name : 'N/A'}</td>
                  <td class="py-3 px-6 text-left">${product.status || 'N/A'}</td>
                  <td class="py-3 px-6 text-left">${product.weight || 'N/A'} gr</td>
                  <td class="py-3 px-6 text-left">${product.condition || 'N/A'}</td>
                  <td class="py-3 px-6 text-center">
                    <img src="${promoImageSrc}" alt="Promo" class="w-12 h-12 object-cover rounded-md mx-auto" onerror="this.onerror=null;this.src='/images/placeholder.png';">
                  </td>
                  <td class="py-3 px-6 text-center">
                    <div class="flex item-center justify-center">
                      <button onclick="viewProduct(${product.id})" class="w-4 mr-2 transform hover:text-purple-500 hover:scale-110">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" /><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" /></svg>
                      </button>
                      <button onclick="editProduct(${product.id})" class="w-4 mr-2 transform hover:text-purple-500 hover:scale-110">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" /></svg>
                      </button>
                      <button onclick="deleteProduct(${product.id})" class="w-4 mr-2 transform hover:text-purple-500 hover:scale-110">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" /></svg>
                      </button>
                    </div>
                  </td>
                </tr>
              `;
              productsTableBody.innerHTML += row;
            });

            // Add event listeners to the new dropdowns
            document.querySelectorAll('.category-select').forEach(select => {
              select.addEventListener('change', async (e) => {
                const productId = e.target.dataset.productId;
                const categoryId = e.target.value;
                try {
                  const response = await fetch(`/api/v1/products/${productId}`, {
                    method: 'PUT',
                    headers: {
                      'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ categoryId: categoryId }),
                  });
                  if (response.ok) {
                    const notification = document.getElementById('category-update-success-notification');
                    notification.classList.remove('hidden');
                    setTimeout(() => {
                      notification.classList.add('hidden');
                    }, 3000);
                  } else {
                    alert('Gagal memperbarui kategori produk.');
                  }
                } catch (error) {
                  console.error('Error updating product category:', error);
                  alert('Terjadi kesalahan saat memperbarui kategori.');
                }
              });
            });

          } catch (error) {
            console.error("Error fetching products:", error);
            loadingMessage.style.display = "none";
            errorMessage.textContent = `Error: ${error.message}. Gagal memuat produk.`;
            errorMessage.style.display = "block";
          }
        }

        // Initial load
        fetchAndRenderProducts();

        // Filter event listener
        productSearchInput.addEventListener('input', () => {
          fetchAndRenderProducts(productSearchInput.value, categoryFilter.value, sellerFilter.value);
        });

        categoryFilter.addEventListener('change', () => {
          console.log("Category filter changed. Value:", categoryFilter.value);
          fetchAndRenderProducts(productSearchInput.value, categoryFilter.value, sellerFilter.value);
        });

        sellerFilter.addEventListener('change', () => {
          console.log("Seller filter changed. Value:", sellerFilter.value);
          fetchAndRenderProducts(productSearchInput.value, categoryFilter.value, sellerFilter.value);
        });

        // Add Category Modal Logic
        const addCategoryModal = document.getElementById('add-category-modal');
        const addCategoryBtn = document.getElementById('add-category-btn');
        const cancelCategoryBtn = document.getElementById('cancel-category-btn');
        const addCategoryForm = document.getElementById('add-category-form');

        if (addCategoryBtn) {
            addCategoryBtn.addEventListener('click', () => {
              addCategoryModal.classList.remove('hidden');
            });
        }

        if (cancelCategoryBtn) {
            cancelCategoryBtn.addEventListener('click', () => {
              addCategoryModal.classList.add('hidden');
            });
        }

        if (addCategoryForm) {
            addCategoryForm.addEventListener('submit', async (e) => {
              e.preventDefault();
              const formData = new FormData(addCategoryForm);
              const data = Object.fromEntries(formData.entries());

              try {
                const response = await fetch('/api/v1/categories', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json',
                  },
                  body: JSON.stringify(data),
                });

                if (response.ok) {
                    const notification = document.getElementById('add-category-success-notification');
                    notification.classList.remove('hidden');
                    setTimeout(() => {
                      notification.classList.add('hidden');
                      window.location.reload(); // Reload after notification
                    }, 1000); // Show for 1 second
                    addCategoryModal.classList.add('hidden');
                  } else {
                    const errorData = await response.json();
                    alert(`Error: ${errorData.message}`);
                  }
              } catch (error) {
                console.error('Error adding category:', error);
                alert('Gagal menambahkan kategori.');
              }
            });
        }
      });

      // Global functions for actions
      function viewProduct(id) {
        window.location.href = `/product-detail/${id}`;
      }

      function editProduct(id) {
        window.location.href = `/dashboard/admin/products/${id}/edit`;
      }

      function deleteProduct(id) {
        document.getElementById("confirm-delete-modal").classList.remove("hidden");
        document.getElementById("confirm-delete-modal").dataset.productId = id;
      }
    </script>

  </body>
</html>